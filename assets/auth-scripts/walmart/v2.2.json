{
  "ios": {
    "getWalmartVerifyIdentityJS": "(function() { var element = \n             document.evaluate(\"//p[contains(text(),'Press & Hold')]\", \n             document,null, XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue; \n             if (element != undefined) { return \"verify_identity\"} } )()",
    "getWalmartCheckErrorJS": "(function() { var element = document.evaluate(\"//div[contains(@id,'global-error')]\",document,null,           XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.textContent;\n            if (element == null || element.length == 0)\n            {return null} else {\n            return element}})()",
    "getWalmartIdentificationJS": "if (window.location.href.indexOf('blocked') > -1) {\n        window.webkit.messageHandlers.iOS.postMessage(\"verify_identity\");\n    }\n    if (document.querySelector(' #email ') && document.querySelector(' #password ')) {\n        document.querySelector('input[id*=\"email\"]').value = \"$email$\";\n        document.querySelector('input[id*=\"password\"]').value = \"$password$\";\n        document.querySelector(\"button[data-automation-id='signin-submit-btn']\").click();\n        window.webkit.messageHandlers.iOS.postMessage(\"sign_in\");\n    } else {\n        document.querySelector('input[id*=\"email\"]').value = \"$email$\";\n        document.querySelector('button[data-automation-id=\"signin-continue-submit-btn\"]').click();\n        setTimeout(function() {\n            if (window.location.href.indexOf('signin/withotpchoice') > -1) {\n                document.querySelector('#sign-in-password-change').value = \"$password$\";\n                document.querySelectorAll('[data-automation-id=\"sign-in-pwd\"]')[0].click();\n            } else {\n                                document.querySelector('#sign-in-password-no-otp').value = \"$password$\";\n                document.querySelectorAll('[data-automation-id=\"sign-in-pwd\"]')[1].click();\n            }\n            window.webkit.messageHandlers.iOS.postMessage(\"sign_in\");\n        }, 2000)\n    }\nconst signInCallback = async function (mutationsList, observer) {  for (const mutation of mutationsList) { \n                // console.log('Mutation ', mutation);\n                if(mutation.type === 'childList') { \n                   if(mutation.addedNodes.length) {                   window.webkit.messageHandlers.iOS.postMessage(\"Validation error is shown\");  }  } \n            } \n        }; \n       const signInObserver = new MutationObserver(signInCallback); \n       signInObserver.observe(document.querySelector('#global-error'), { attributes: true, childList: true, characterData: false, subtree: true });  // Captcha page Callback\n       var isCaptchaError = false; \n        var captchaCallback = async function (mutationsList, observer) { \n            for (const mutation of mutationsList) { \n                var el = mutation.target; \n                // console.log('Mutation ', mutation);\n                if(mutation.addedNodes.length) { \n                   if(mutation.type === 'childList') { \n                       if((el.hasAttribute('id') && el.getAttribute('id') === 'px-captcha') && !isCaptchaError) { \n                            window.webkit.messageHandlers.iOS.postMessage(\"Captcha is open\"); \n                            isCaptchaError = true; \n                        } \n                    } \n               } \n\n               if (mutation.removedNodes.length) { \n                    mutation.removedNodes.forEach(function(removedEl) { \n                        if(removedEl.classList instanceof DOMTokenList) { \n               if((removedEl.hasAttribute('id') && removedEl.getAttribute('id') === 'px-captcha') || removedEl.querySelector('#px-captcha')) { \n                                window.webkit.messageHandlers.iOS.postMessage(\"Captcha is closed\"); \n                                isCaptchaError = false; \n                            } \n                        } \n                     }); \n                }  \n            } \n        }; \n       var captchaObserver = new MutationObserver(captchaCallback); \n       captchaObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree: true });",
    "getWalmartSignInRequiredJS": "Boolean(document.evaluate(\"//*[contains(text(),'Sign in')]\", document, null, XPathResult.ANY_TYPE,null).iterateNext())"
  },

  "android": {
    "getCheckErrorScriptWalmart": "(function() { var element = document.evaluate(\"//div[contains(@id,'global-error')]\",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.textContent;if (element == null || element.length == 0){return null} else { return element}})()",
    "getAuthenticationChallenge": "(function() { var element =         document.evaluate(\"//p[contains(text(),'Press & Hold')]\",document,null, XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue; if (element != undefined) { return \"verify_identity\"}})()",
    "getScript": "(function() { if (window.location.href.indexOf('blocked') > -1) { CallbackAndroid.authCallback(\"verify_identity\"); } if (document.querySelector(' #email ') && document.querySelector(' #password ')) { document.querySelector('input[id*=\"email\"]').value = \"$ userName $\"; document.querySelector('input[id*=\"password\"]').value = \"$ password $\"; document.querySelector(\"button[data-automation-id='signin-submit-btn']\").click(); CallbackAndroid.authCallback(\"sign_in\"); } else { document.querySelector('input[id*=\"email\"]').value = \" $ userName $ \"; document.querySelector('button[data-automation-id=\"signin-continue-submit-btn\"]').click(); setTimeout(function() { if (window.location.href.indexOf('signin/withotpchoice') > -1) { document.querySelector('#sign-in-password-change').value = \"$ password $\"; document.querySelectorAll('[data-automation-id=\"sign-in-pwd\"]')[0].click(); } else { document.querySelector('#sign-in-password-no-otp').value = \"$ password $\"; document.querySelectorAll('[data-automation-id=\"sign-in-pwd\"]')[1].click();} CallbackAndroid.authCallback(\"sign_in\");}, 5000)} const signInCallback = function (mutationsList, observer) {       for (const mutation of mutationsList) {         if(mutation.type === 'childList') {         if(mutation.addedNodes.length) {         CallbackAndroid.authCallback(\"check_error\");        }       }                         }                     };                     const signInObserver = new MutationObserver(signInCallback);     signInObserver.observe(document.querySelector('#global-error'), { attributes: true, childList: true, characterData: false, subtree: true });   let isCaptchaError = false;   const captchaCallback = function (mutationsList, observer) {    for (const mutation of mutationsList) {    const el = mutation.target;    if(mutation.addedNodes.length) {    if(mutation.type === 'childList') {    if((el.hasAttribute('id') && el.getAttribute('id') === 'px-captcha') && !isCaptchaError) {                   CallbackAndroid.authCallback(\"verify_identity_open\");    isCaptchaError = true;    }    }    }  if (mutation.removedNodes.length) {   mutation.removedNodes.forEach(function(removedEl) {   if(removedEl.classList instanceof DOMTokenList) {   if((removedEl.hasAttribute('id') && removedEl.getAttribute('id') === 'px-captcha') || removedEl.querySelector('#px-captcha')) {   CallbackAndroid.authCallback(\"verify_identity_close\");   isCaptchaError = false; }   }  });  }    }  };  const captchaObserver = new MutationObserver(captchaCallback); captchaObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree: true });  }) ()",
    "checkWalmartOrderListPage": "(function() { var element = document.querySelector(\"form[id*='track-order-form']\").querySelector(\"h1\").innerText;         if (element == null || element.length == 0)        {return 'scrape'} else {                return element}})()"
  }
}