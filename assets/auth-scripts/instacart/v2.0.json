{
  "ios": {
    "getInstacartIdentification": "var isEmailError, isPasswordError, isFlashError, isRecaptchaVerifyError, isEmailFieldAvailable, isVerification = false; \n             const callback = function (mutationsList, observer) { \n                for (const mutation of mutationsList) { \n                    const el = mutation.target; \n                    const verifyEl = document.querySelector('[id*=\"code-\"]'); \n                     if (verifyEl && !isVerification) { \n                         console.log('Verification screen callback'); \n                           [document.querySelector('[data-testid=\"mobile-close\"]'), document.querySelector('[data-testid=\"back\"]')].forEach(function (item) { \n                              item.addEventListener('click', function () { \n                              window.webkit.messageHandlers.iOS.postMessage(\"verification_closed\");\n                             });\n                             }); \n                        isVerification = true; \n                       window.webkit.messageHandlers.iOS.postMessage(\"Verification screen callback\"); \n                    } \n                    if(mutation.type === 'attributes' && mutation.attributeName === 'errortext') { \n                        if(el.getAttribute('errortext') && el.getAttribute('errortext').trim() != '') { \n                            console.log('Invalid email or passwrd'); \n                           window.webkit.messageHandlers.iOS.postMessage(\"Invalid_user_or_passwrd\"); \n                        } \n                    } \n                   if (mutation.addedNodes.length) { \n                        if (el && el.classList instanceof DOMTokenList) { \n                             if (document.querySelector('[data-testid=\"desktop-close\"]')) { \n                                const passwordEl = document.querySelector(\"div[id*='error_password']\"); \n                                if (passwordEl && passwordEl.textContent.trim() != '' && !isPasswordError) { \n                                    console.log('Password error callback'); \n                                    isPasswordError = true; \n                                    window.webkit.messageHandlers.iOS.postMessage(\"Password error callback\"); \n                                } \n                                 const emailEl = el.querySelector(\"div[id*='error_email']\"); \n                                 if (emailEl && emailEl.textContent.trim() != '' && !isEmailError) { \n                                   console.log('Email error callback'); \n                                    isEmailError = true; \n                                    window.webkit.messageHandlers.iOS.postMessage(\"Email error callback\"); \n                                } \n                                \n                                 if (el.querySelector(\"[data-testid*='flash-message']\") && !isFlashError && el.querySelector(\"[data-testid*='flash-message']\").textContent.trim() != '') { \n                                     console.log('Flash message callback'); \n                                    isFlashError = true; \n                                     window.webkit.messageHandlers.iOS.postMessage(\"Flash message callback\"); \n                               } \n                                if (el.querySelector(\"input[type='email']\") && !isEmailFieldAvailable) { \n                                    console.log('Email field Availablity callback'); \n                                    isEmailFieldAvailable = true; \n                                    window.webkit.messageHandlers.iOS.postMessage(\"Email field Availablity callback\"); \n                                } \n                                break; \n                             } \n                        } \n                    } \n\n                    if (mutation.removedNodes.length) { \n                       if (el && el.classList instanceof DOMTokenList) { \n                            const removedEl = mutation.removedNodes[0]; \n                            const passwordEl = document.querySelector(\"div[id*='error_password']\"); \n                             if (passwordEl && passwordEl.textContent.trim() == '' && isPasswordError) { \n                                // console.log('Password removed error callback', passwordEl);\n                                isPasswordError = false; \n                            } \n                             const emailEl = el.querySelector(\"div[id*='error_email']\"); \n                             if (emailEl && emailEl.textContent.trim() == '' && isEmailError) { \n                                // console.log('Email removed error callback', emailEl);\n                                isEmailError = false; \n                             } \n                             const verifyEl = document.querySelector('[id*=\"code-\"]'); \n                            if (!verifyEl && isVerification) { \n                                // console.log('Verification removed screen callback');\n                                isVerification = false; \n                            } \n                           if (!el.querySelector(\"[data-testid*='flash-message']\") && isFlashError) { \n                                // console.log('Flash removed message callback', el);\n                                 isFlashError = false; \n                            } \n                            if (!el.querySelector(\"input[type='email']\") && isEmailFieldAvailable) { \n                                // console.log('Email field removed Availablity callback', el);\n                                isEmailFieldAvailable = false; \n                            } \n                            break; \n                         }  \n                    } \n                 } \n             }; \n             var observer = new MutationObserver(callback); \n            observer.observe(document.querySelector('body#landing'), { attributes: true, childList: true, characterData: true, subtree: true }); ",
    "getInstacartInjectLoginJS": "document.querySelector(\"input[type='email']\").value = \"$email$\";document.querySelector(\"input[type='password']\").value = \"$password$\";document.querySelector('button[type=\"submit\"]').click()",
    "getInstacartErrorPasswordInjectJS": " (function() { var element = document.querySelector(\"div[id*='error_password-']\").innerHTML;if (element == null && element.lenght == 0) {return null} else { return element}})()",
    "getInstacartWrongPasswordInjectJS": " (function() { var element = document.querySelector('input[type=\"password\"]').getAttribute('errortext');if (element == null && element.length == 0) {return null} else { return element}})()",
    "getInstacartRecaptchaInjectJs": " (function() { var element = document.querySelector(\"button[id*='recaptcha-verify-button']\");if (element != null && element.innerHTML !== null){return 1} else { return null}})()",
    "getInstacartErrorEmailInjectJS": "(function() { var element = document.querySelector(\"div[id*='error_email-']\").innerHTML; if (element == null && element.lenght == 0){return null} else { return element }})()",
    "getInstacartFlashMessage": "(function() {var element = document.querySelector(\"span[data-testid*=flash-message]\").innerHTML;if (element == null && element.lenght == 0){return null} else { return element}})()",
    "getInstacartOnClick": " (function() { var element = document.evaluate('//span[text()=\"Log in\"]',document,null,           XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.click(); \n            { return \"Log_in\" } })()",
    "getInstacartProcide": " (function() { var element = document.evaluate('//span[text()=\"Log in\"]',document,null,   XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.click(); })()",
    "getInstacartVerificationCodeJS": " (function() { var element = \n             document.evaluate(\"//h2[contains(text(),'Enter verification code')]\", \n            document,null, XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue; \n             if (element != undefined) { return \"verification_code\"} } )()",
    "getInstacartCaptchaClosed": "var isClosed = false;  var callback1 = async function (mutationsList, observer) { for (const mutation of mutationsList) { const el = mutation.target;  if (el && el.classList instanceof DOMTokenList) {  if(mutation.type === 'attributes' && mutation.target.localName  === 'div' && mutation.attributeName === 'style') {  if(el.style.visibility === 'visible') {  console.log('Captcha popup is open');  isClosed = false; window.webkit.messageHandlers.iOS.postMessage(\"Captcha_open\"); \n  break;} else if(el.style.visibility === 'hidden' && !isClosed) { \n console.log('Capcha closed'); isClosed = true; \n window.webkit.messageHandlers.iOS.postMessage(\"captcha_closed\"); \n break;  } } }} };var observer = new MutationObserver(callback1); \n observer.observe(document.body, { attributes: true, childList: true, characterData: true, subtree: true }); ",
    "getInstacartVerificationCodeSuccess": "(function () { var isVerificationError = false;var verificationCallback = function (mutationsList) {\n  for (const mutation of mutationsList) { if (mutation.removedNodes.length) { const removedEl = mutation.removedNodes[0]; const verifyEl = removedEl.querySelector('input[id*=\"code-\"]'); const errorEl = removedEl.querySelector('[id*=\"error_code-\"]');\nconsole.log('Verification code popup function call');\nif (verifyEl && verifyEl.value.length === 6 && !errorEl && !isVerificationError) {console.log('Verification code popup is closed');\nwindow.webkit.messageHandlers.iOS.postMessage(\"verification_success\");\nisVerificationError = true; }}}}\n var verificationObserver = new MutationObserver(verificationCallback);\n\n                           verificationObserver.observe(document.querySelector('body#landing'), { attributes: true, childList: true, characterData: true, subtree: true }) })();"
  },
  "android": {
    "getSignInScriptInstacart": "javascript:\n \ndocument.querySelector(\"input[type='email']\").value = \" + email + \";\n          \ndocument.querySelector(\"input[type='password']\").value = \" + password + \";\ndocument.querySelector('button[type=\"submit\"]').click()",
    "getCheckErrorScriptPassword": "(function() { var element = document.querySelector(\"div[id*='error_password']\").innerHTML;\n          \n     if (element == null || element.length == 0)\n           \n     {return null} else {\n           \n     return element}})()",
    "getCheckErrorScriptEmail": "(function() { var element = document.querySelector(\"div[id*='error_email']\").innerHTML;\n          \n     if (element == null || element.length == 0)\n         \n     {return null} else {\n           \n     return element}})()",
    "getCheckErrorScriptFlashMessage": "(function() { var element = document.querySelector(\"span[data-testid*='flash-message']\").innerHTML;\n           \n     if (element == null || element.length == 0)\n         \n     {return null} else {\n       \n     return element}})()",
    "getCheckRecaptchaScriptInstacart": "(function() { var element = document.querySelector(\"button[id*='recaptcha-reload-button']\");\n          \n    if (element != null && element.innerHTML !== null)\n          \n    {return 1} else {\n          \n    return null}})()",
    "clickOnLoginBtn": "javascript:\n           \n     document.evaluate('//span[text()=\"Log in\"]',document,null,\n            \n     XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.click()",
    "clickOnContinueWithBrowser": "javascript:\n            \n     document.evaluate('//span[text()=\"Continue in browser\"]',document,null,\n         \n     XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.click()",
    "invalidUserCredInstacart": "(function() { var element = document.querySelector('input[type=\"password\"]').getAttribute('errortext');\n        \n     if (element == null && element.length == 0) {return null} else { return element}})() ",
    "identifyJSAction": "(function() { \n            \n     var element = null;\n           \n     element = document.evaluate('//span[text()=\"Continue in browser\"]',document,null,\n               \n     XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue;\n      \n     if (element != undefined && element != null) {\n               \n     Android.authCallback(\"Continue_in_browser\");return;\n}\n\n             \n     element = document.evaluate('//span[text()=\"Log \n     in\"]',document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue;\n             \n     if (element != undefined && element != null) {\n               \n     Android.authCallback(\"click_Login_btn\");return;\n } \n \n})\n            \n     ()",
    "identifyClickEvents": "let isClosed = false;\n            \n     const callback = function (mutationsList, observer) {\n                \n     for (const mutation of mutationsList) {\n                  \n     const el = mutation.target;\n                  \n     if (el && el.classList instanceof DOMTokenList) {  \n                     \n    if(mutation.type === 'attributes' && mutation.target.localName  === 'div' && mutation.attributeName === 'style') {\n                       \n    if(el.style.visibility === 'visible') {\n                              \n    console.log('Captcha popup is open');\n                               \n    Android.authCallback(\"captcha_opened\");return;\n                               \n    isClosed = false;\n                                \n    break;\n                            \n    } else if(el.style.visibility === 'hidden' && !isClosed) {\n                                \n    console.log('Captcha popup is closed');\n                               \n    Android.authCallback(\"captcha_closed\");return;\n                              \n    isClosed = true;\n                               \n    break;\n                           \n   }\n                       \n   }\n                    \n   }\n               \n   }\n           \n   };\n           \n   var observer = new MutationObserver(callback);\n            \n   observer.observe(document.body, { attributes: true, childList: true, characterData: true, subtree: true });",
    "validationSuccess": "(function () {\n\n                \n      var isVerificationError = false;\n\n                \n      var verificationCallback = function (mutationsList) {\n\n                    \n      for (const mutation of mutationsList) {\n\n                        \n      if (mutation.removedNodes.length) {\n\n                           \n      const removedEl = mutation.removedNodes[0];\n\n                           \n      const verifyEl = removedEl.querySelector('input[id*=\"code-\"]');\n\n                          \n      const errorEl = removedEl.querySelector('[id*=\"error_code-\"]');\n\n                           \n      console.log('Verification code popup function call');\n\n                            \n      if (verifyEl && verifyEl.value.length === 6 && !errorEl && !isVerificationError) {\n\n                               \n      console.log('Verification code popup is closed');\n\n                                \n      Android.authCallback(\"verification_success\");\n                               \n      isVerificationError = true;\n\n                            \n      }\n\n                       \n      }\n\n                   \n      }\n\n                \n      }\n\n                \nvar verificationObserver = new MutationObserver(verificationCallback);\n\n                \nverificationObserver.observe(document.querySelector('body#landing'), { attributes: true, childList: true, characterData: true, subtree: true });\n\n            \n})();",
    "handleInstacartErrorEvents": "(function () {\n\n            \n      var isEmailError, isPasswordError, isFlashError, isRecaptchaVerifyError, isEmailFieldAvailable, isVerification = false;\n\n            \n      const callback = function (mutationsList, observer) {\n\n                \n      for (const mutation of mutationsList) {\n\n                   \n      const el = mutation.target;\n\n                   \n      const verifyEl = document.querySelector('[id*=\"code-\"]');\n\n                    \n      if (verifyEl && !isVerification) {\n\n                       \n      console.log('Verification screen callback');\n\n                \n      [document.querySelector('[data-testid=\"mobile-close\"]'), \n                 \n      document.querySelector('[data-testid=\"back\"]')].forEach(function (item) { \n                  \n      item.addEventListener('click', function () { \n                  \n      Android.authCallback(\"verification_closed\");\n                 \n      });\n                \n      }); \n                    \n      Android.authCallback(\"verification_code\");return; \n                       \n      isVerification = true;\n\n                   \n      }\n\n                    \n     if(mutation.type === 'attributes' && mutation.attributeName === 'errortext') {\n\n                        \n     if(el.getAttribute('errortext') && el.getAttribute('errortext').trim() != '') {\n\n                            \n     console.log('Invalid user or passwrd');\n\n                        \n     Android.authCallback(\"invalid_user\");return; \n                       \n     }\n\n                    \n     }\n\n                   \n    if (mutation.addedNodes.length) {\n\n                       \n    if (el && el.classList instanceof DOMTokenList) {\n\n                            \n    if (document.querySelector('[data-testid=\"desktop-close\"]')) {\n\n                               \n    const passwordEl = document.querySelector(\"div[id*='error_password']\");\n\n                                \n    if (passwordEl && passwordEl.textContent.trim() != '' && !isPasswordError) {\n\n                                    \n    console.log('Password error callback');\n\n                                \n    Android.authCallback(\"check_error_password\");return; \n                                   \n    isPasswordError = true;\n\n                               \n    }\n\n                                \n   const emailEl = el.querySelector(\"div[id*='error_email']\");\n\n                              \n   if (emailEl && emailEl.textContent.trim() != '' && !isEmailError) {\n\n                                  \n   console.log('Email error callback');\n\n                               \n   Android.authCallback(\"check_error_email\"); return; \n                                    \n   isEmailError = true;\n\n                                \n   }\n\n                               \n   \n\n                                \n   if (el.querySelector(\"[data-testid*='flash-message']\") && !isFlashError && el.querySelector(\"[data-testid*='flash-message']\").textContent.trim() != '') {\n\n                                   \n   console.log('Flash message callback');\n\n                                \n   Android.authCallback(\"flash_message\");return;\n                                   \n   isFlashError = true;\n\n                               \n   }\n\n                                \n   if (el.querySelector(\"input[type='email']\") && !isEmailFieldAvailable) {\n\n                                   \n   console.log('Email field Availablity callback');\n\n                                \n   Android.authCallback(\"sign_in\"); return;\n                                   \n   isEmailFieldAvailable = true;\n\n                                \n   }\n\n                                \n   break;\n\n                           \n   }\n\n                        \n  }\n\n                    \n  }\n\n            \n  \n\n                    \n  if (mutation.removedNodes.length) {\n\n                       \n  if (el && el.classList instanceof DOMTokenList) {\n\n                           \n  const removedEl = mutation.removedNodes[0];\n\n                           \n  const passwordEl = document.querySelector(\"div[id*='error_password']\");\n\n                            \n  if (passwordEl && passwordEl.textContent.trim() == '' && isPasswordError) {\n\n                               \n  // console.log('Password removed error callback', passwordEl);\n\n                               \n  isPasswordError = false;\n\n                           \n  }\n\n                          \n  const emailEl = el.querySelector(\"div[id*='error_email']\");\n\n                           \n  if (emailEl && emailEl.textContent.trim() == '' && isEmailError) {\n\n                                \n  // console.log('Email removed error callback', emailEl);\n\n                                \n  isEmailError = false;\n\n                            \n  }\n\n                            \n  const verifyEl = document.querySelector('[id*=\"code-\"]');\n\n                           \n  if (!verifyEl && isVerification) {\n\n                                \n  // console.log('Verification removed screen callback');\n\n                              \n  isVerification = false;\n\n                           \n  }\n\n                           \n  if (!el.querySelector(\"[data-testid*='flash-message']\") && isFlashError) {\n\n                               \n  // console.log('Flash removed message callback', el);\n\n                               \n  isFlashError = false;\n\n                            \n  }\n\n                           \n  if (!el.querySelector(\"input[type='email']\") && isEmailFieldAvailable) {\n\n                                \n  // console.log('Email field removed Availablity callback', el);\n\n                               \n  isEmailFieldAvailable = false;\n\n                            \n  }\n\n                           \n  break;\n                      \n  }\n                    \n  }\n                \n  }\n            \n  };\n           \n  var observer = new MutationObserver(callback);\n\n            \n  observer.observe(document.querySelector('body#landing'), { attributes: true, childList: true, characterData: true, subtree: true }); \n           \n  })();"
  }
}
