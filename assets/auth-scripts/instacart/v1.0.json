{
  "ios": {
    "getInstacartIdentification": "var isEmailError, isPasswordError, isFlashError, isRecaptchaVerifyError, isEmailFieldAvailable, isVerification = false; \n             const callback = function (mutationsList, observer) { \n                for (const mutation of mutationsList) { \n                    const el = mutation.target; \n                    const verifyEl = document.querySelector('[id*=\"code-\"]'); \n                     if (verifyEl && !isVerification) { \n                         console.log('Verification screen callback'); \n                           [document.querySelector('[data-testid=\"mobile-close\"]'), document.querySelector('[data-testid=\"back\"]')].forEach(function (item) { \n                              item.addEventListener('click', function () { \n                              window.webkit.messageHandlers.iOS.postMessage(\"verification_closed\");\n                             });\n                             }); \n                        isVerification = true; \n                       window.webkit.messageHandlers.iOS.postMessage(\"Verification screen callback\"); \n                    } \n                    if(mutation.type === 'attributes' && mutation.attributeName === 'errortext') { \n                        if(el.getAttribute('errortext') && el.getAttribute('errortext').trim() != '') { \n                            console.log('Invalid email or passwrd'); \n                           window.webkit.messageHandlers.iOS.postMessage(\"Invalid_user_or_passwrd\"); \n                        } \n                    } \n                   if (mutation.addedNodes.length) { \n                        if (el && el.classList instanceof DOMTokenList) { \n                             if (document.querySelector('[data-testid=\"desktop-close\"]')) { \n                                const passwordEl = document.querySelector(\"div[id*='error_password']\"); \n                                if (passwordEl && passwordEl.textContent.trim() != '' && !isPasswordError) { \n                                    console.log('Password error callback'); \n                                    isPasswordError = true; \n                                    window.webkit.messageHandlers.iOS.postMessage(\"Password error callback\"); \n                                } \n                                 const emailEl = el.querySelector(\"div[id*='error_email']\"); \n                                 if (emailEl && emailEl.textContent.trim() != '' && !isEmailError) { \n                                   console.log('Email error callback'); \n                                    isEmailError = true; \n                                    window.webkit.messageHandlers.iOS.postMessage(\"Email error callback\"); \n                                } \n                                \n                                 if (el.querySelector(\"[data-testid*='flash-message']\") && !isFlashError && el.querySelector(\"[data-testid*='flash-message']\").textContent.trim() != '') { \n                                     console.log('Flash message callback'); \n                                    isFlashError = true; \n                                     window.webkit.messageHandlers.iOS.postMessage(\"Flash message callback\"); \n                               } \n                                if (el.querySelector(\"input[type='email']\") && !isEmailFieldAvailable) { \n                                    console.log('Email field Availablity callback'); \n                                    isEmailFieldAvailable = true; \n                                    window.webkit.messageHandlers.iOS.postMessage(\"Email field Availablity callback\"); \n                                } \n                                break; \n                             } \n                        } \n                    } \n\n                    if (mutation.removedNodes.length) { \n                       if (el && el.classList instanceof DOMTokenList) { \n                            const removedEl = mutation.removedNodes[0]; \n                            const passwordEl = document.querySelector(\"div[id*='error_password']\"); \n                             if (passwordEl && passwordEl.textContent.trim() == '' && isPasswordError) { \n                                // console.log('Password removed error callback', passwordEl);\n                                isPasswordError = false; \n                            } \n                             const emailEl = el.querySelector(\"div[id*='error_email']\"); \n                             if (emailEl && emailEl.textContent.trim() == '' && isEmailError) { \n                                // console.log('Email removed error callback', emailEl);\n                                isEmailError = false; \n                             } \n                             const verifyEl = document.querySelector('[id*=\"code-\"]'); \n                            if (!verifyEl && isVerification) { \n                                // console.log('Verification removed screen callback');\n                                isVerification = false; \n                            } \n                           if (!el.querySelector(\"[data-testid*='flash-message']\") && isFlashError) { \n                                // console.log('Flash removed message callback', el);\n                                 isFlashError = false; \n                            } \n                            if (!el.querySelector(\"input[type='email']\") && isEmailFieldAvailable) { \n                                // console.log('Email field removed Availablity callback', el);\n                                isEmailFieldAvailable = false; \n                            } \n                            break; \n                         }  \n                    } \n                 } \n             }; \n             var observer = new MutationObserver(callback); \n            observer.observe(document.querySelector('body#landing'), { attributes: true, childList: true, characterData: true, subtree: true }); ",
    "getInstacartInjectLoginJS": "document.querySelector(\"input[type='email']\").value = \"$email$\";document.querySelector(\"input[type='password']\").value = \"$password$\";document.querySelector('button[type=\"submit\"]').click()",
    "getInstacartErrorPasswordInjectJS": " (function() { var element = document.querySelector(\"div[id*='error_password-']\").innerHTML;if (element == null && element.lenght == 0) {return null} else { return element}})()",
    "getInstacartWrongPasswordInjectJS": " (function() { var element = document.querySelector('input[type=\"password\"]').getAttribute('errortext');if (element == null && element.length == 0) {return null} else { return element}})()",
    "getInstacartRecaptchaInjectJs": " (function() { var element = document.querySelector(\"button[id*='recaptcha-verify-button']\");if (element != null && element.innerHTML !== null){return 1} else { return null}})()",
    "getInstacartErrorEmailInjectJS": "(function() { var element = document.querySelector(\"div[id*='error_email-']\").innerHTML; if (element == null && element.lenght == 0){return null} else { return element }})()",
    "getInstacartFlashMessage": "(function() {var element = document.querySelector(\"span[data-testid*=flash-message]\").innerHTML;if (element == null && element.lenght == 0){return null} else { return element}})()",
    "getInstacartOnClick": " (function() { var element = document.evaluate('//span[text()=\"Log in\"]',document,null,           XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.click(); \n            { return \"Log_in\" } })()",
    "getInstacartProcide": " (function() { var element = document.evaluate('//span[text()=\"Continue in browser\"]',document,null,   XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.click(); { return \"Continue_in_browser\" } })()",
    "getInstacartVerificationCodeJS": " (function() { var element = \n             document.evaluate(\"//h2[contains(text(),'Enter verification code')]\", \n            document,null, XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue; \n             if (element != undefined) { return \"verification_code\"} } )()",
    "getInstacartCaptchaClosed": "var isClosed = false;  var callback1 = async function (mutationsList, observer) { for (const mutation of mutationsList) { const el = mutation.target;  if (el && el.classList instanceof DOMTokenList) {  if(mutation.type === 'attributes' && mutation.target.localName  === 'div' && mutation.attributeName === 'style') {  if(el.style.visibility === 'visible') {  console.log('Captcha popup is open');  isClosed = false; window.webkit.messageHandlers.iOS.postMessage(\"Captcha_open\"); \n  break;} else if(el.style.visibility === 'hidden' && !isClosed) { \n console.log('Capcha closed'); isClosed = true; \n window.webkit.messageHandlers.iOS.postMessage(\"captcha_closed\"); \n break;  } } }} };var observer = new MutationObserver(callback1); \n observer.observe(document.body, { attributes: true, childList: true, characterData: true, subtree: true }); ",
    "getInstacartVerificationCodeSuccess": "(function () { var isVerificationError = false;var verificationCallback = function (mutationsList) {\n  for (const mutation of mutationsList) { if (mutation.removedNodes.length) { const removedEl = mutation.removedNodes[0]; const verifyEl = removedEl.querySelector('input[id*=\"code-\"]'); const errorEl = removedEl.querySelector('[id*=\"error_code-\"]');\nconsole.log('Verification code popup function call');\nif (verifyEl && verifyEl.value.length === 6 && !errorEl && !isVerificationError) {console.log('Verification code popup is closed');\nwindow.webkit.messageHandlers.iOS.postMessage(\"verification_success\");\nisVerificationError = true; }}}}\n var verificationObserver = new MutationObserver(verificationCallback);\n\n                           verificationObserver.observe(document.querySelector('body#landing'), { attributes: true, childList: true, characterData: true, subtree: true }) })();"
  },
  "android": {
    "getSignInScriptInstacart": "javascript:document.querySelector(\"input[type='email']\").value = \"$ email $\";          document.querySelector(\"input[type='password']\").value = \"$ password $\";document.querySelector('button[type=\"submit\"]').click()",
    "getCheckErrorScriptPassword": "(function() { var element = document.querySelector(\"div[id*='error_password']\").innerHTML;               if (element == null || element.length == 0)               {return null} else {return element}})()",
    "getCheckErrorScriptEmail": "(function() { var element = document.querySelector(\"div[id*='error_email']\").innerHTML;      if (element == null || element.length == 0)  {return null} else { return element}})()",
    "getCheckErrorScriptFlashMessage": "(function() { var element = document.querySelector(\"span[data-testid*='flash-message']\").innerHTML;    if (element == null || element.length == 0)     {return null} else {     return element}})()",
    "getCheckRecaptchaScriptInstacart": "(function() { var element = document.querySelector(\"button[id*='recaptcha-reload-button']\");    if (element != null && element.innerHTML !== null)    {return 1} else {    return null}})()",
    "clickOnLoginBtn": "javascript:    document.evaluate('//span[text()=\"Log in\"]',document,null,    XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.click()",
    "clickOnContinueWithBrowser": "javascript:         document.evaluate('//span[text()=\"Continue in browser\"]',document,null,         XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.click()",
    "invalidUserCredInstacart": "(function() { var element = document.querySelector('input[type=\"password\"]').getAttribute('errortext');     if (element == null && element.length == 0) {return null} else { return element}})() ",
    "identifyJSAction": "(function() { var element = null; element = document.evaluate('//span[text()=\"Continue in browser\"]',document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue; if (element != undefined && element != null) { Android.authCallback(\"Continue_in_browser\");return;} element = document.evaluate('//span[text()=\"Log in\"]',document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue;if (element != undefined && element != null) { Android.authCallback(\"click_Login_btn\");return; } })()",
    "clickOnContinueInBrowser": "var firstScreen = Array.from(document.querySelectorAll('button')).filter(function(v)           { return v.textContent.toLowerCase().trim() == 'continue in browser' });                             if(firstScreen && firstScreen.length) {                                  // click on 'continue on browser'                                  firstScreen[0].click();          } ",
    "identifyClickEvents": "(function() { let isClosed = false; const callback = function (mutationsList, observer) { for (const mutation of mutationsList) { const el = mutation.target; if (el && el.classList instanceof DOMTokenList) { if(mutation.type === 'attributes' && mutation.target.localName === 'div' && mutation.attributeName === 'style') { if(el.style.visibility === 'visible') { console.log('Captcha popup is open'); Android.authCallback(\"captcha_opened\");return; isClosed = false; break; } else if(el.style.visibility === 'hidden' && !isClosed) { console.log('Captcha popup is closed'); Android.authCallback(\"captcha_closed\");return; isClosed = true; break; } } } } }; var observer = new MutationObserver(callback); observer.observe(document.body, { attributes: true, childList: true, characterData: true, subtree: true });})();",
    "validationSuccess": "(function () {      var isVerificationError = false;   var verificationCallback = function (mutationsList) {     for (const mutation of mutationsList) {      if (mutation.removedNodes.length) {  const removedEl = mutation.removedNodes[0];     const verifyEl = removedEl.querySelector('input[id*=\"code-\"]');                                const errorEl = removedEl.querySelector('[id*=\"error_code-\"]');      console.log('Verification code popup function call');      if (verifyEl && verifyEl.value.length === 6 && !errorEl && !isVerificationError) {      console.log('Verification code popup is closed');      Android.authCallback(\"verification_success\");      isVerificationError = true;     }      }    }  } var verificationObserver = new MutationObserver(verificationCallback); verificationObserver.observe(document.querySelector('body#landing'), { attributes: true, childList: true, characterData: true, subtree: true });})();",
    "handleInstacartErrorEvents": "(function () {      var isEmailError, isPasswordError, isFlashError, isRecaptchaVerifyError, isEmailFieldAvailable, isVerification = false;      const callback = function (mutationsList, observer) {      for (const mutation of mutationsList) {      const el = mutation.target;      const verifyEl = document.querySelector('[id*=\"code-\"]');     if (verifyEl && !isVerification) {console.log('Verification screen callback');      [document.querySelector('[data-testid=\"mobile-close\"]'),       document.querySelector('[data-testid=\"back\"]')].forEach(function (item) {       item.addEventListener('click', function () {       Android.authCallback(\"verification_closed\");      });     });      Android.authCallback(\"verification_code\");return;      isVerification = true;     }    if(mutation.type === 'attributes' && mutation.attributeName === 'errortext') {     if(el.getAttribute('errortext') && el.getAttribute('errortext').trim() != '') {     console.log('Invalid user or passwrd');    Android.authCallback(\"invalid_user\");return;      }     }    if (mutation.addedNodes.length) {   if (el && el.classList instanceof DOMTokenList) {    if (document.querySelector('[data-testid=\"desktop-close\"]')) {   const passwordEl = document.querySelector(\"div[id*='error_password']\");   if (passwordEl && passwordEl.textContent.trim() != '' && !isPasswordError) {    console.log('Password error callback');    Android.authCallback(\"check_error_password\");return;    isPasswordError = true;    }  const emailEl = el.querySelector(\"div[id*='error_email']\");  if (emailEl && emailEl.textContent.trim() != '' && !isEmailError) {   console.log('Email error callback');   Android.authCallback(\"check_error_email\"); return;    isEmailError = true;   }   if (el.querySelector(\"[data-testid*='flash-message']\") && !isFlashError && el.querySelector(\"[data-testid*='flash-message']\").textContent.trim() != '') {   console.log('Flash message callback');   Android.authCallback(\"flash_message\");return;  isFlashError = true;   }   if (el.querySelector(\"input[type='email']\") && !isEmailFieldAvailable) {  console.log('Email field Availablity callback');  Android.authCallback(\"sign_in\"); return;   isEmailFieldAvailable = true; }   break;   }  }  }  if (mutation.removedNodes.length) { if (el && el.classList instanceof DOMTokenList) { const removedEl = mutation.removedNodes[0];  const passwordEl = document.querySelector(\"div[id*='error_password']\");  if (passwordEl && passwordEl.textContent.trim() == '' && isPasswordError) {   isPasswordError = false;  }  const emailEl = el.querySelector(\"div[id*='error_email']\"); if (emailEl && emailEl.textContent.trim() == '' && isEmailError) {isEmailError = false;  } const verifyEl = document.querySelector('[id*=\"code-\"]');  if (!verifyEl && isVerification) { isVerification = false; }  if (!el.querySelector(\"[data-testid*='flash-message']\") && isFlashError) {isFlashError = false;  }  if (!el.querySelector(\"input[type='email']\") && isEmailFieldAvailable) {                                isEmailFieldAvailable = false;  }  break; }  }}};  var observer = new MutationObserver(callback);observer.observe(document.querySelector('body#landing'), { attributes: true, childList: true, characterData: true, subtree: true });   })();"
  }}